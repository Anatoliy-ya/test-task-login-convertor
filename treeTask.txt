Решение задачи экспорта объектов в виде динамического изображения
1. Используемые технологии:

    SVG: для визуального рендера иерархии объектов на холсте, предоставляя возможность динамических изменений и работы с объектами как с DOM-элементами.
    Canvas: для создания финального изображения, которое можно экспортировать в форматах PNG или JPEG.
    Base64: для передачи изображения как текста, удобного для сохранения или отправки через API.
    API стороннего сервиса: для получения данных иерархического справочника.


2. Краткое описание реализации:
Шаг 1: Получение иерархических данных

    Получаем данные из стороннего сервиса через API.
    Преобразуем данные в дерево для удобного отображения  

Шаг 2: Рендеринг в SVG

    Используем SVG для отображения данных в виде дерева:
        Узлы представлены прямоугольниками или кругами.
        Связи (линии или стрелки) указывают на родственные связи.
    Реализуем динамические стили (цвета, размеры) для интерактивности.

Шаг 3: Преобразование в Canvas

    После завершения редактирования объектов рендерим SVG в Canvas

Шаг 4: Экспорт изображения

    Предоставляем пользователю возможность скачать изображение

    const link = document.createElement("a");
    link.download = "exported-image.png";
    link.href = dataURL;
    link.click();

    Сохраняем изображение в Base64 и передаём его через API.

3. Продуманные решения и оптимизации:

    Масштабируемость с помощью SVG:
        SVG позволяет легко масштабировать изображение без потери качества.
        Объектами легко манипулировать (добавлять узлы, изменять связи).

    Canvas для экспорта:
        Canvas даёт возможность создать итоговое растровое изображение, что подходит для передачи или сохранения.

    Разделение задач:
        SVG используется для подготовки и визуализации.
        Canvas — для подготовки конечного растрового изображения.

    Дополнительные возможности:
        Визуальная настройка объектов через UI.
        Поддержка различных форматов экспорта (PNG, JPEG, SVG).


    Модульность:
        Выделение функций для рендера SVG, преобразования в Canvas и экспорта. Это улучшит читаемость и тестируемость кода.

    Оптимизация:
        Кэшировать результаты преобразования данных в дерево, Local Storage: Хранить финальное изображение или дерево в Local Storage. 
        Использование Web Workers.
        Ленивая загрузка (Lazy Loading).
        Использование Offscreen Canvas.